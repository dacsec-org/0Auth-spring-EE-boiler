##spring.profiles.active=dev
#
## create an application-dev.properties file in the resources directory and
##  Copy all of the lines after this comment and uncomment in the other file
#
#spring.datasource.url=jdbc:postgresql://localhost:5544/FP-api-starter
#spring.datasource.username=docker
#spring.datasource.password=docker
#spring.jpa.show-sql=true
#
### Hibernate Properties
## The SQL dialect makes Hibernate generate better SQL for the chosen database
#spring.jpa.properties.hibernate.dialect = org.hibernate.dialect.PostgreSQLDialect
#
## Hibernate ddl auto (create, create-drop, validate, update)
#spring.jpa.hibernate.ddl-auto = update
#
## 0Auth: chose one or more providers to use for the given service.
## To obtain client credentials for Google OAuth2 authentication,
## head on over to the Google API Console, ?Credentials? section, create
## credentials of type ?OAuth2 Client ID? for our web application.
## This results in Google setting up a client id and secret for us.
#spring.security.oauth2.client.registration.google.client-id=<your client id>
#spring.security.oauth2.client.registration.google.client-secret=<your
# client secret>
#
#spring.security.oauth2.client.registration.facebook.client-id=<your client id>
#spring.security.oauth2.client.registration.facebook.client-secret=<your
# client secret>
#
#spring.security.oauth2.client.registration.github.client-id=<your client id>
#spring.security.oauth2.client.registration.github.client-secret=<your
# client secret>
#
#spring.security.oauth2.client.registration.okta.client-id=<your client id>
#spring.security.oauth2.client.registration.okta.client-secret=<your client
# secret>
#
